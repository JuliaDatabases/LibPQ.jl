@static if VERSION < v"1.3.0"

using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))

include("build_OpenSSL.jl")

products = [
    LibraryProduct(prefix, ["libpq"], :LIBPQ_HANDLE),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/LibPQ_jll.jl/releases/download/LibPQ-v12.3.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/LibPQ.v12.3.0.aarch64-linux-gnu.tar.gz", "a44903b47db2b0be6004c39bb142124c11cf46a316a5cbb7d04ce77624d7f0ab"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/LibPQ.v12.3.0.aarch64-linux-musl.tar.gz", "8a5afc96eb383f6b5af3ae24d63c2616201d4fa9fb880ac211729f6d50700617"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/LibPQ.v12.3.0.armv7l-linux-gnueabihf.tar.gz", "241062e144d5d3f417f3163320714c8a031df684d92f84f084cadcbb72d01709"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/LibPQ.v12.3.0.armv7l-linux-musleabihf.tar.gz", "8f03ea2f2a6b200cb62a747d44f35086464eb142334a2b641b142cea1fa383aa"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/LibPQ.v12.3.0.i686-linux-gnu.tar.gz", "b5377f61ca4ca82c4b8cf22db8bc99e747ba9fc65367f304dd2e71ce6db5e55f"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/LibPQ.v12.3.0.i686-linux-musl.tar.gz", "8fb30f68809a888312477b4a3ae99232563059c84f2b1922593a4208bdd87a2f"),
    Windows(:i686) => ("$bin_prefix/LibPQ.v12.3.0.i686-w64-mingw32.tar.gz", "450133afcd25345763e9b46949b751872b95f2658af3df07db7674ecf40a1ecf"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/LibPQ.v12.3.0.powerpc64le-linux-gnu.tar.gz", "21fc2591ccf436b01613bea4d1a65b864e6733961cca9d03bd13a993685780e0"),
    MacOS(:x86_64) => ("$bin_prefix/LibPQ.v12.3.0.x86_64-apple-darwin14.tar.gz", "51f06713c14eaafc15b4f9a0ff96cfadc0665e294ff8f6857fd3acb1354e9575"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/LibPQ.v12.3.0.x86_64-linux-gnu.tar.gz", "3d4a0e280ab4ee889cb89ee443c3d31ce68222e38644f113ba91def3067a4a8d"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/LibPQ.v12.3.0.x86_64-linux-musl.tar.gz", "e56b8752cd2aa39030f1f4a52508d46f79135f1325810eefc3eb074465b65927"),
    FreeBSD(:x86_64) => ("$bin_prefix/LibPQ.v12.3.0.x86_64-unknown-freebsd11.1.tar.gz", "dcec73380a190cbd38d4a22c69c34fc23da05e4f005c36a7177d581dd32b18bc"),
    Windows(:x86_64) => ("$bin_prefix/LibPQ.v12.3.0.x86_64-w64-mingw32.tar.gz", "a3dce235b54851071ee9caf3e4bc4f88eeb3b33fd15926aa25b24ffbc68823a4"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)

end # @static
